name: Build GStreamer Android

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build GStreamer Android (${{ matrix.abi }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        abi: [arm64-v8a]

    steps:
      - name: 🧹 Free up disk space
        run: |
          echo "=== Before cleanup ==="
          df -h
          echo "=== Disk usage by directory ==="
          sudo du -sh /usr/share/* 2>/dev/null | sort -hr | head -20 || true
          sudo du -sh /usr/local/* 2>/dev/null | sort -hr | head -20 || true
          
          echo "=== Removing unnecessary packages ==="
          # Remove large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/.ghcup
          
          # Clean apt cache
          sudo apt-get clean
          
          # Remove docker images
          sudo docker image prune --all --force
          sudo docker system prune --all --force
          
          echo "=== After cleanup ==="
          df -h

      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-24.05
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            # Aggressive garbage collection
            min-free = 1073741824
            max-free = 3221225472
            # Build optimization
            max-jobs = auto
            cores = 0
            # Keep build outputs small
            keep-outputs = false
            keep-derivations = false

      - name: 🗄️ Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: gstreamer-android
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true

      - name: 🔨 Build GStreamer Android
        run: |
          echo "=== Disk space before build ==="
          df -h
          
          echo "Building GStreamer Android for ${{ matrix.abi }}..."
          
          # Build with verbose logging
          nix build .#gstreamer-android \
            --print-build-logs \
            --verbose \
            --keep-going
          
          echo "=== Disk space after build ==="
          df -h
          
          # Show build results
          echo "::group::Build artifacts"
          ls -lhR result/
          file result/artifacts/*.so 2>/dev/null || file result/*.so || true
          echo "::endgroup::"

      - name: 🧹 Cleanup Nix store
        if: always()
        run: |
          echo "=== Cleaning up Nix store ==="
          nix-collect-garbage -d
          nix store gc
          nix store optimise
          df -h

      - name: 📊 Verify build
        run: |
          echo "::group::File checksums"
          if [ -f result/artifacts/checksums.txt ]; then
            cat result/artifacts/checksums.txt
          else
            find result -name "*.so" -exec sha256sum {} \;
          fi
          echo "::endgroup::"

          echo "::group::Architecture verification"
          for so in $(find result -name "*.so"); do
            echo "Checking: $(basename "$so")"
            if file "$so" | grep -q "ARM aarch64"; then
              echo "✓ $(basename "$so") - ARM aarch64 ✓"
            elif file "$so" | grep -q "ELF"; then
              echo "⚠ $(basename "$so") - ELF but not ARM64"
              file "$so"
            else
              echo "✗ $(basename "$so") - Not an ELF file!"
              exit 1
            fi
          done
          echo "::endgroup::"

      - name: 📦 Package artifacts
        run: |
          mkdir -p artifacts/${{ matrix.abi }}
          
          # Find and copy .so files
          find result -name "*.so" -exec cp -v {} artifacts/${{ matrix.abi }}/ \;
          
          # Copy documentation if exists
          find result -name "README.md" -exec cp -v {} artifacts/ \; || true
          find result -name "checksums.txt" -exec cp -v {} artifacts/${{ matrix.abi }}/ \; || true

          # Create archive
          tar -czf gstreamer-android-${{ matrix.abi }}.tar.gz -C artifacts .

          # Create build info
          cat > artifacts/build-info.txt << EOF
          GStreamer Android Build
          =======================
          Version: 1.26.6
          ABI: ${{ matrix.abi }}
          NDK: r25c
          Platform: android-21
          Commit: ${{ github.sha }}
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}
          
          Files:
          $(ls -lh artifacts/${{ matrix.abi }}/)
          EOF

          echo "=== Build Info ==="
          cat artifacts/build-info.txt

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gstreamer-android-${{ matrix.abi }}
          path: |
            artifacts/${{ matrix.abi }}/*.so
            artifacts/*.md
            artifacts/build-info.txt
          retention-days: 30
          if-no-files-found: error

      - name: 📤 Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: gstreamer-android-${{ matrix.abi }}-archive
          path: gstreamer-android-${{ matrix.abi }}.tar.gz
          retention-days: 90
          if-no-files-found: error

  test-devshell:
    name: Test Development Shell
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-24.05
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: 🧪 Test development shell
        run: |
          nix develop --command bash -c '
            echo "Testing development shell..."
            echo "GStreamer version: ${GSTREAMER_ANDROID_VERSION:-not set}"
            echo "NDK version: ${GSTREAMER_ANDROID_NDK:-not set}"
            echo "Target ABI: ${GSTREAMER_ANDROID_ABI:-not set}"
            
            if command -v gst-android-info &> /dev/null; then
              gst-android-info
            else
              echo "gst-android-info command not found (may be OK)"
            fi
            
            echo "✓ Development shell works"
          '

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 📦 Prepare release assets
        run: |
          mkdir -p release
          
          echo "=== Downloaded artifacts ==="
          ls -lhR release-artifacts/
          
          # Copy archives
          find release-artifacts -name "*.tar.gz" -exec cp -v {} release/ \;
          
          # Create combined archive if multiple ABIs
          if [ -d release-artifacts ]; then
            cd release-artifacts
            tar -czf ../release/gstreamer-android-all-abis.tar.gz . --exclude='*.tar.gz'
            cd ..
          fi
          
          echo "=== Release files ==="
          ls -lh release/

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.tar.gz
          body: |
            ## GStreamer Android Build
            
            Pre-built GStreamer Android libraries for integration with Android apps.
            
            ### What's Included
            - `libgstreamer_android.so` - GStreamer JNI wrapper
            - `libc++_shared.so` - C++ standard library (if applicable)
            
            ### Supported ABIs
            - arm64-v8a (Android 64-bit ARM)
            
            ### Installation
            1. Download the archive for your target ABI
            2. Extract to `app/src/main/jniLibs/<ABI>/`
            3. Follow the README.md for integration steps
            
            ### Build Info
            - **GStreamer Version**: 1.26.6
            - **NDK Version**: r25c (25.2.9519653)
            - **Min Android Version**: API 21 (Android 5.0)
            - **Built with**: Nix Flakes
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            
            ### Verification
            All binaries are automatically verified for correct architecture during build.
            See individual `build-info.txt` files in each archive for checksums.
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
